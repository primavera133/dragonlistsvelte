
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read;
      allow write: if false;
    }
    
    match /species {
      allow create, update: if userIsAdmin(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin)
      allow delete: if userIsAdmin(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin)
    }
    
    match /sightings/{sightingId} {
      allow create: if isSignedIn()
      allow update: if userIsAdmin(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin) || userIsCreator(get(/databases/$(database)/documents/sightings/$(sightingId)).data.userId) 
      allow delete: if userIsCreator(get(/databases/$(database)/documents/sightings/$(sightingId)).data.userId)
    }
    
    match /users/{userId} {
      allow create: if isSignedIn()
      allow update: if userIsAdmin(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin) || userIsCreator(get(/databases/$(database)/documents/sightings/$(sightingId)).data.userId) 
      allow delete: if userIsAdmin(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin) || userIsCreator(get(/databases/$(database)/documents/sightings/$(sightingId)).data.userId) 
    }
  }

  function isSignedIn() {
    return (request.auth.uid != null)
  }

  function userIsAdmin(admin) {
    return admin == true
  }

  function userIsCreator(userId) {
  	return userId == request.auth.uid
  }

  function notCreator() {
    return resource.data.status != 'creator'
  }
}
